package com.ead.authuser.controller;

import java.time.LocalDateTime;
import java.time.ZoneId;

import org.springframework.beans.BeanUtils;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.ead.authuser.dto.UserDto;
import com.ead.authuser.enums.UserStatus;
import com.ead.authuser.enums.UserType;
import com.ead.authuser.models.UserModel;
import com.ead.authuser.service.UserService;

import lombok.RequiredArgsConstructor;

@RestController
@RequestMapping("/auth")
@CrossOrigin(origins = "*", maxAge = 4000)
@RequiredArgsConstructor
public class AuthenticationController {

	private static final String ERROR_E_MAIL_ALREADY_EXIST = "Error: E-mail already exist";
	private static final String ERROR_USERNAME_ALREADY_EXIST = "Error: Username already exist";
	
	private final UserService userService;

	@PostMapping("/signup")
	public ResponseEntity<Object> registerUser(@RequestBody UserDto userDto) {
		
		if(userService.existsByUserName(userDto.getUserName()))
			return ResponseEntity.status(HttpStatus.CONFLICT).body(ERROR_USERNAME_ALREADY_EXIST);
		
		if(userService.existsByEmail(userDto.getEmail()))
			return ResponseEntity.status(HttpStatus.CONFLICT).body(ERROR_E_MAIL_ALREADY_EXIST);
		
		var userModel = new UserModel();
		BeanUtils.copyProperties(userDto, userModel);
		userModel.setUserStatus(UserStatus.ACTIVE);
		userModel.setUserType(UserType.STUDENT);
		userModel.setCreationDate(LocalDateTime.now(ZoneId.of("UTC")));
		userModel.setLastUpdateDate(LocalDateTime.now(ZoneId.of("UTC")));
		
		userService.save(userModel);
		
		return ResponseEntity.status(HttpStatus.CREATED).body(userModel);
	}
}
